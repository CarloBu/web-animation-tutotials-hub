---
import type { Tutorial } from '../types/interfaces';
export interface Props {
	tutorials: Tutorial[];
}

const { tutorials } = Astro.props;

type Library = 'GSAP' | 'FRAMER' | 'JS' | 'CSS' | 'default';

const colorMappings: Record<Library, { background: string; badge: string }> = {
	GSAP: { background: 'hover:bg-lime-100', badge: 'bg-lime-400 text-text' },
	FRAMER: { background: 'hover:bg-violet-100', badge: 'bg-violet-500 text-text' },
	JS: { background: 'hover:bg-yellow-100', badge: 'bg-yellow-500 text-text' },
	CSS: { background: 'hover:bg-blue-100', badge: 'bg-blue-500 text-text' },
	default: { background: 'hover:bg-gray-100', badge: 'bg-gray-500 text-text' },
};

function getColor(library: string, type: 'background' | 'badge') {
	const upperLibrary = library.toUpperCase() as Library;
	return (colorMappings[upperLibrary] || colorMappings.default)[type];
}

function getBackgroundColors(library: string) {
	return getColor(library, 'background');
}

function getBadgeColors(library: string) {
	return getColor(library, 'badge');
}
---

<style>
	.responsive-grid {
		grid-template-columns: repeat(auto-fill, minmax(15rem, 1fr));
	}

	@media (min-width: 480px) {
		/* Tailwind's sm breakpoint */
		.responsive-grid {
			grid-template-columns: repeat(auto-fill, minmax(25rem, 1fr));
		}
	}
</style>

<div class="responsive-grid grid gap-6">
	{
		tutorials.map((tut) => {
			return (
				<div
					class={`smooth-transition group flex flex-col justify-between overflow-hidden rounded-base border-2 border-black bg-lightBg hover:shadow-cardLight focus:shadow-cardLight dark:bg-bg ${getBackgroundColors(tut.library)}`}
				>
					<div class="aspect-video overflow-hidden">
						<video
							src={tut.src}
							muted
							loop
							playsinline
							poster={`/placeholders/${tut.src.split('/').pop()?.split('.')[0] ?? ''}_grayscale.jpg`}
							class="h-full w-full object-cover transition-transform duration-500 ease-in-out"
						/>
					</div>

					<div class="p-4 md:p-5">
						<>
							<div class="mb-2 flex items-center justify-between">
								<h3 class="line-clamp-2 text-lg font-medium text-text">{tut.title}</h3>
							</div>
							<div class="mt-6 flex items-center justify-between">
								<div class="mr-4 inline-flex items-center gap-4">
									<span
										class={`rounded-base border-2 border-border px-3 py-1 text-sm font-base ${getBadgeColors(tut.library)}`}
									>
										{tut.library}
									</span>
									<span class="xsm:max-w-[300px] inline-block max-w-[105px] truncate rounded-base border-2 border-border bg-gray-100 px-3 py-1 text-sm font-base text-gray-800">
										{tut.channelTitle}
									</span>
								</div>

								<a
									href={tut.link}
									target="_blank"
									rel="noopener noreferrer"
									class="smooth-transition flex-shrink-0 rounded-base border-2 border-black bg-main px-5 py-2 hover:bg-pink-300 hover:shadow-buttonLight active:bg-pink-500"
								>
									Watch
								</a>
							</div>
						</>
					</div>
				</div>
			);
		})
	}
</div>
<script>
	document.addEventListener('DOMContentLoaded', function () {
		var lazyVideos = [].slice.call(document.querySelectorAll('video.lazy'));

		if ('IntersectionObserver' in window) {
			var lazyVideoObserver = new IntersectionObserver(function (entries, observer) {
				entries.forEach(function (entry) {
					if (entry.isIntersecting) {
						const video = entry.target as HTMLVideoElement;
						for (let i = 0; i < video.children.length; i++) {
							const videoSource = video.children[i] as HTMLSourceElement;
							if (videoSource.tagName === 'SOURCE') {
								videoSource.src = videoSource.dataset.src || '';
							}
						}

						video.load();
						video.classList.remove('lazy');
						lazyVideoObserver.unobserve(video);
					}
				});
			});

			lazyVideos.forEach(function (lazyVideo) {
				lazyVideoObserver.observe(lazyVideo);
			});
		}
	});
</script>

<script>
	const videos = document.querySelectorAll('video');

	const handleIntersection = (entries: IntersectionObserverEntry[]) => {
		entries.forEach((entry) => {
			const video = entry.target as HTMLVideoElement;
			if (entry.isIntersecting) {
				video.play().catch(() => {});
			} else {
				video.pause();
			}
		});
	};

	const observer = new IntersectionObserver(handleIntersection, {
		threshold: 0.1,
		//rootMargin: '0px 0px 50px 0px',
	});

	videos.forEach((video) => {
		observer.observe(video);
	});
</script>
