---
import Layout from '@layouts/DefaultPage.astro';
import { tutorialItems } from '@content/tutorials/tutorials.json';
import { categories } from '@content/categories/categories.json';

import YouTubeClipsGrid from '@components/YouTubeClipsGrid.astro';
import type { Tutorial } from '../types/interfaces';
export interface Props {
	tutorials: Tutorial[];
}

const categoryOrder: Record<string, number> = categories.reduce<Record<string, number>>(
	(acc, category, index) => {
		acc[category.category] = index;
		return acc;
	},
	{},
);

function groupTutorialsByCategory(tutorials: Tutorial[]): Record<string, Tutorial[]> {
	const grouped: Record<string, Tutorial[]> = {};

	categories.forEach(({ category }) => {
		grouped[category] = tutorials.filter((tutorial) => tutorial.category.includes(category));
	});

	// Create a new object with sorted categories
	const sortedGrouped: Record<string, Tutorial[]> = {};
	categories.forEach(({ category }) => {
		if (grouped[category] && grouped[category].length > 0) {
			sortedGrouped[category] = grouped[category];
		}
	});

	return sortedGrouped;
}
const groupedTutorials = groupTutorialsByCategory(tutorialItems);
const bgColors = [
	'bg-teal-100 dark:bg-teal-900',
	'bg-green-100 dark:bg-green-900',
	'bg-blue-100 dark:bg-blue-900',
	'bg-purple-100 dark:bg-purple-900',
	'bg-pink-100 dark:bg-pink-900',
	'bg-yellow-100 dark:bg-yellow-900',
	'bg-red-100 dark:bg-red-900',
	'bg-indigo-100 dark:bg-indigo-900',
	'bg-orange-100 dark:bg-orange-900',
	'bg-gray-100 dark:bg-gray-900',
];
---

<Layout>
	{
		Object.entries(groupedTutorials).map(([category, tutorials], index) => (
			<section
				class={`mb-8 rounded-base border-4 border-black p-4 shadow-cardLight sm:p-8 ${bgColors[index % bgColors.length]} `}
			>
				<h2 class="mb-3 text-5xl font-heading uppercase tracking-wider text-text dark:text-darkText">
					{category}
				</h2>

				<YouTubeClipsGrid tutorials={tutorials} />
			</section>
		))
	}
</Layout>
